/**
 * Audit Scheduler Service
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞—É–¥–∏—Ç–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
 */

const cron = require('node-cron');
const logger = require('../utils/logger');
const DepositAuditService = require('./depositAudit.service');
const telegramBotService = require('./telegramBot.service');
const config = require('../config/config');

class AuditSchedulerService {
  constructor() {
    this.isRunning = false;
    this.lastAuditTime = null;
    this.auditHistory = [];
    this.maxHistorySize = 100;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞—É–¥–∏—Ç–∞
   */
  start() {
    if (this.isRunning) {
      logger.warn('‚ö†Ô∏è Audit scheduler already running');
      return;
    }

    logger.info('üöÄ Starting automatic audit scheduler');

    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞—É–¥–∏—Ç –≤ 09:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    this.dailyAuditJob = cron.schedule('0 9 * * *', async () => {
      await this.runDailyAudit();
    }, {
      scheduled: true,
      timezone: "Europe/Moscow"
    });

    // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞—É–¥–∏—Ç –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 10:00
    this.weeklyAuditJob = cron.schedule('0 10 * * 0', async () => {
      await this.runWeeklyAudit();
    }, {
      scheduled: true,
      timezone: "Europe/Moscow"
    });

    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã)
    this.emergencyCheckJob = cron.schedule('0 */4 * * *', async () => {
      await this.runEmergencyCheck();
    }, {
      scheduled: true,
      timezone: "Europe/Moscow"
    });

    this.isRunning = true;
    logger.info('‚úÖ Audit scheduler started successfully', {
      dailyAudit: '09:00 MSK',
      weeklyAudit: 'Sunday 10:00 MSK', 
      emergencyCheck: 'Every 4 hours'
    });
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  stop() {
    if (!this.isRunning) {
      logger.warn('‚ö†Ô∏è Audit scheduler is not running');
      return;
    }

    if (this.dailyAuditJob) this.dailyAuditJob.destroy();
    if (this.weeklyAuditJob) this.weeklyAuditJob.destroy();
    if (this.emergencyCheckJob) this.emergencyCheckJob.destroy();

    this.isRunning = false;
    logger.info('üõë Audit scheduler stopped');
  }

  /**
   * –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞—É–¥–∏—Ç - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—á–µ—Ä–∞—à–Ω–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
   */
  async runDailyAudit() {
    const auditId = `daily_${Date.now()}`;
    logger.info('üìÖ Starting daily audit', { auditId });

    try {
      // –ê—É–¥–∏—Ç –≤—á–µ—Ä–∞—à–Ω–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
      const yesterday = new Date();
      yesterday.setDate(yesterday.getDate() - 1);
      const dateStr = yesterday.toISOString().split('T')[0];

      const auditResults = await DepositAuditService.auditDeposits(dateStr, dateStr);
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
      this.addToHistory({
        type: 'daily',
        auditId,
        date: dateStr,
        results: auditResults,
        timestamp: new Date()
      });

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
      await this.sendAuditNotification('daily', auditResults, dateStr);

      logger.info('‚úÖ Daily audit completed', {
        auditId,
        date: dateStr,
        missingDeposits: auditResults.statistics.missingNotifications,
        successRate: auditResults.statistics.successRate
      });

    } catch (error) {
      logger.error('‚ùå Daily audit failed', {
        auditId,
        error: error.message,
        stack: error.stack
      });

      // –£–≤–µ–¥–æ–º–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ
      await this.sendErrorNotification('daily', error);
    }
  }

  /**
   * –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞—É–¥–∏—Ç - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
   */
  async runWeeklyAudit() {
    const auditId = `weekly_${Date.now()}`;
    logger.info('üìä Starting weekly audit', { auditId });

    try {
      // –ê—É–¥–∏—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
      const endDate = new Date();
      endDate.setDate(endDate.getDate() - 1); // –í—á–µ—Ä–∞
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - 7); // –ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥

      const dateFrom = startDate.toISOString().split('T')[0];
      const dateTo = endDate.toISOString().split('T')[0];

      const auditResults = await DepositAuditService.auditDeposits(dateFrom, dateTo);
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      this.addToHistory({
        type: 'weekly',
        auditId,
        period: { from: dateFrom, to: dateTo },
        results: auditResults,
        timestamp: new Date()
      });

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç
      await this.sendWeeklyReport(auditResults, dateFrom, dateTo);

      logger.info('‚úÖ Weekly audit completed', {
        auditId,
        period: `${dateFrom} to ${dateTo}`,
        missingDeposits: auditResults.statistics.missingNotifications,
        successRate: auditResults.statistics.successRate
      });

    } catch (error) {
      logger.error('‚ùå Weekly audit failed', {
        auditId,
        error: error.message
      });

      await this.sendErrorNotification('weekly', error);
    }
  }

  /**
   * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
   */
  async runEmergencyCheck() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —á–∞—Å–∞ –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–æ–∑—Ä–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
    const recentHistory = this.auditHistory
      .filter(h => h.type === 'daily' && h.results.statistics.successRate < 95)
      .slice(-2); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏

    if (recentHistory.length < 2) {
      logger.debug('üîç Emergency check skipped - no recent issues detected');
      return;
    }

    const auditId = `emergency_${Date.now()}`;
    logger.info('üö® Starting emergency check', { auditId });

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
      const today = new Date().toISOString().split('T')[0];
      const auditResults = await DepositAuditService.auditDeposits(today, today);

      if (auditResults.statistics.missingNotifications > 0) {
        // –ï—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await this.sendEmergencyAlert(auditResults, today);
      }

      logger.info('‚úÖ Emergency check completed', {
        auditId,
        missingToday: auditResults.statistics.missingNotifications
      });

    } catch (error) {
      logger.error('‚ùå Emergency check failed', {
        auditId,
        error: error.message
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞—É–¥–∏—Ç–∞
   */
  async sendAuditNotification(type, auditResults, date) {
    try {
      const stats = auditResults.statistics;
      const missing = auditResults.results.missing.length;

      let message = `üìä <b>${type === 'daily' ? '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π' : '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π'} –ê—É–¥–∏—Ç –î–µ–ø–æ–∑–∏—Ç–æ–≤</b>\n\n`;
      message += `üìÖ –î–∞—Ç–∞: ${date}\n`;
      message += `üí∞ –í—Å–µ–≥–æ FB –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${stats.fbDepositsCount}\n`;
      message += `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${stats.foundNotifications}\n`;
      
      if (missing > 0) {
        message += `‚ö†Ô∏è <b>–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${missing}</b>\n`;
        message += `üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${stats.successRate}%\n\n`;
        
        // –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–∞
        if (auditResults.results.missing.length > 0) {
          message += `üîç <b>–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã:</b>\n`;
          auditResults.results.missing.slice(0, 3).forEach((missing, index) => {
            message += `${index + 1}. ${missing.subid} - ${missing.reason}\n`;
          });
          
          if (auditResults.results.missing.length > 3) {
            message += `... –∏ –µ—â–µ ${auditResults.results.missing.length - 3} –¥–µ–ø–æ–∑–∏—Ç–æ–≤\n`;
          }
        }

        // –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (auditResults.recommendations.length > 0) {
          message += `\nüí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n`;
          auditResults.recommendations.slice(0, 2).forEach((rec, index) => {
            message += `${index + 1}. ${rec.message}\n`;
          });
        }
      } else {
        message += `‚úÖ <b>–í—Å–µ –¥–µ–ø–æ–∑–∏—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!</b>\n`;
        message += `üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: 100%\n`;
      }

      message += `\n<i>–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}</i>`;

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
      for (const ownerId of config.owners) {
        try {
          await telegramBotService.sendMessage(ownerId, message, { parse_mode: 'HTML' });
        } catch (error) {
          logger.warn(`Failed to send audit notification to owner ${ownerId}`, { error: error.message });
        }
      }

    } catch (error) {
      logger.error('Failed to send audit notification', { error: error.message });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  async sendWeeklyReport(auditResults, dateFrom, dateTo) {
    try {
      const stats = auditResults.statistics;
      
      let message = `üìà <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –û—Ç—á–µ—Ç –ø–æ –î–µ–ø–æ–∑–∏—Ç–∞–º</b>\n\n`;
      message += `üìÖ –ü–µ—Ä–∏–æ–¥: ${dateFrom} - ${dateTo}\n`;
      message += `üí∞ –í—Å–µ–≥–æ FB –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${stats.fbDepositsCount}\n`;
      message += `üì§ –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${stats.sentNotificationsCount}\n`;
      message += `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.foundNotifications}\n`;
      message += `‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${stats.missingNotifications}\n`;
      message += `üìä –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${stats.successRate}%\n\n`;

      // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
      const recentDaily = this.auditHistory
        .filter(h => h.type === 'daily')
        .slice(-7)
        .map(h => h.results.statistics.successRate);
      
      if (recentDaily.length > 0) {
        const avgSuccessRate = Math.round(recentDaily.reduce((a, b) => a + b, 0) / recentDaily.length);
        message += `üìà <b>–¢—Ä–µ–Ω–¥—ã:</b>\n`;
        message += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é: ${avgSuccessRate}%\n`;
        
        const trend = recentDaily.length > 3 ? 
          (recentDaily.slice(-3).reduce((a, b) => a + b) / 3) - (recentDaily.slice(0, 3).reduce((a, b) => a + b) / 3) :
          0;
        
        if (trend > 2) {
          message += `üìà ‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ (+${Math.round(trend)}%)\n`;
        } else if (trend < -2) {
          message += `üìâ ‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ (${Math.round(trend)}%)\n`;
        } else {
          message += `‚û°Ô∏è ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n`;
        }
      }

      message += `\n<i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç - ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}</i>`;

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º
      for (const ownerId of config.owners) {
        try {
          await telegramBotService.sendMessage(ownerId, message, { parse_mode: 'HTML' });
        } catch (error) {
          logger.warn(`Failed to send weekly report to owner ${ownerId}`);
        }
      }

    } catch (error) {
      logger.error('Failed to send weekly report', { error: error.message });
    }
  }

  /**
   * –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async sendEmergencyAlert(auditResults, date) {
    try {
      const missing = auditResults.results.missing.length;
      
      let message = `üö® <b>–≠–ö–°–¢–†–ï–ù–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n`;
      message += `‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã!\n`;
      message += `üìÖ –î–∞—Ç–∞: ${date}\n`;
      message += `‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${missing} –¥–µ–ø–æ–∑–∏—Ç–æ–≤\n\n`;
      
      message += `üîç <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b>\n`;
      auditResults.results.missing.slice(0, 5).forEach((missing, index) => {
        message += `${index + 1}. ${missing.subid} ($${missing.deposit.revenue})\n`;
      });

      message += `\nüîó –ü—Ä–æ–≤–µ—Ä–∏—Ç—å: POST /admin/audit-deposits\n`;
      message += `<i>–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}</i>`;

      // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞–º —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
      for (const ownerId of config.owners) {
        try {
          await telegramBotService.sendMessage(ownerId, message, { parse_mode: 'HTML' });
        } catch (error) {
          logger.warn(`Failed to send emergency alert to owner ${ownerId}`);
        }
      }

    } catch (error) {
      logger.error('Failed to send emergency alert', { error: error.message });
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞—É–¥–∏—Ç–∞
   */
  async sendErrorNotification(auditType, error) {
    try {
      let message = `‚ùå <b>–û—à–∏–±–∫–∞ ${auditType} –∞—É–¥–∏—Ç–∞</b>\n\n`;
      message += `üîç –û—à–∏–±–∫–∞: ${error.message}\n`;
      message += `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}\n\n`;
      message += `üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞—É–¥–∏—Ç–∞`;

      for (const ownerId of config.owners) {
        try {
          await telegramBotService.sendMessage(ownerId, message, { parse_mode: 'HTML' });
        } catch (sendError) {
          logger.warn(`Failed to send error notification to owner ${ownerId}`);
        }
      }

    } catch (error) {
      logger.error('Failed to send error notification', { error: error.message });
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
   */
  addToHistory(auditRecord) {
    this.auditHistory.push(auditRecord);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (this.auditHistory.length > this.maxHistorySize) {
      this.auditHistory = this.auditHistory.slice(-this.maxHistorySize);
    }

    this.lastAuditTime = new Date();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  getSchedulerStats() {
    return {
      isRunning: this.isRunning,
      lastAuditTime: this.lastAuditTime,
      auditHistoryCount: this.auditHistory.length,
      recentAudits: this.auditHistory.slice(-5).map(audit => ({
        type: audit.type,
        date: audit.date || audit.period,
        successRate: audit.results.statistics.successRate,
        missingDeposits: audit.results.statistics.missingNotifications,
        timestamp: audit.timestamp
      })),
      nextScheduledAudits: {
        daily: '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 MSK',
        weekly: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 10:00 MSK',
        emergency: '–ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)'
      }
    };
  }

  /**
   * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
   */
  async runManualAudit(dateFrom, dateTo) {
    const auditId = `manual_${Date.now()}`;
    logger.info('üîß Starting manual audit', { auditId, dateFrom, dateTo });

    try {
      const auditResults = await DepositAuditService.auditDeposits(dateFrom, dateTo);
      
      this.addToHistory({
        type: 'manual',
        auditId,
        period: { from: dateFrom, to: dateTo },
        results: auditResults,
        timestamp: new Date()
      });

      return auditResults;

    } catch (error) {
      logger.error('‚ùå Manual audit failed', { auditId, error: error.message });
      throw error;
    }
  }
}

// –°–æ–∑–¥–∞—Ç—å singleton instance
const auditScheduler = new AuditSchedulerService();

module.exports = auditScheduler;